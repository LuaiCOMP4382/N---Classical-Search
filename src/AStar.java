import java.util.Comparator;
import java.util.HashMap;
import java.util.PriorityQueue;

public class AStar {
	
	public static Board AStarBoard(Board initialBoard) {
		
		Comparator<Board> comp = new BoardHComparator();
		HashMap<Integer, Board> visitedStates = new HashMap<Integer, Board>(100); // Holds the visited states
		PriorityQueue<Board> searchHeap = new PriorityQueue<Board>(comp); // Heap used for A* Searching
		
		visitedStates.put(initialBoard.numericalRep(), initialBoard); // Save the initial state
		searchHeap.add(initialBoard);
		
		Board currentBoard = null; // currentBoard is the current state
		Board[] branchBoards; // branchBoards is an array that contains next states (branches) generated by currentBoard
		
		int depth; // Depth the graph is currently at
		
		while (!searchHeap.isEmpty()) {
			
			currentBoard = searchHeap.remove();	
			
			if (currentBoard.getCollisions() == 0) // If we have no queens attacking, we found a solution
				return currentBoard;

			depth = currentBoard.getDepth();

			branchBoards = currentBoard.generateNextStates(depth + 1); // depth not zero because we care about it

			// Any unvisited states are added to visitedStates and to
			// searchHeap
			// visited states are ignored
			for (int i = 0; i < branchBoards.length; i++)
				if (!visitedStates.containsValue(branchBoards[i])) {

					visitedStates.put(branchBoards[i].numericalRep(), branchBoards[i]);
					searchHeap.add(branchBoards[i]);

				}

		}
		
		return currentBoard;
		
	}
	
}
